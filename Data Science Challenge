
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.base import clone\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "from rfpimp import permutation_importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def var_imp_plot(imp_df, title):\n",
    "    imp_df.columns = ['feature', 'feature_importance']\n",
    "    sns.barplot(x = 'feature_importance', y = 'feature', data = imp_df, orient = 'h', color = 'royalblue') \\\n",
    "       .set_title(title, fontsize = 20)\n",
    "\n",
    "def r2(rf, X_train, y_train):\n",
    "    \n",
    "    return r2_score(y_train, rf.predict(X_train))\n",
    "\n",
    "def imp_df(column_names, importances):\n",
    "    \n",
    "    df = pd.DataFrame({'feature': column_names, 'feature_importance': importances}).sort_values('feature_importance', ascending = False).reset_index(drop = True)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('yellow_tripdata_2017-06.csv')\n",
    "\n",
    "# subtract tolls amount from total amount\n",
    "df['total_amount'] = df['total_amount'] - df['tolls_amount']\n",
    "\n",
    "# drop the tolls_amount column\n",
    "df = df.drop(['tolls_amount'], axis=1)\n",
    "\n",
    "# drop refund records\n",
    "df = df[df['total_amount'] >= 0]\n",
    "\n",
    "# compute trip minutes and create the time_difference column using trip minutes \n",
    "t1 = pd.to_datetime(df['tpep_pickup_datetime']) \n",
    "t2 = pd.to_datetime(df['tpep_dropoff_datetime'])\n",
    "df['time_difference'] = (t2 - t1)/np.timedelta64(1,'m')\n",
    "\n",
    "# drop outliers\n",
    "idx1 = df[(df['time_difference'] == 0) & (df['trip_distance'] != 0)].index\n",
    "df = df.drop(idx1)\n",
    "\n",
    "# drop outliers\n",
    "idx2 = df[(df['trip_distance'] == 0) & (df['fare_amount'] != 0)].index\n",
    "df = df.drop(idx2)\n",
    "\n",
    "# no pick-up locations information provided\n",
    "idx3 = df[(df['PULocationID'] == 264) | (df['PULocationID'] == 265)].index\n",
    "df = df.drop(idx3)\n",
    "\n",
    "# drop outliers\n",
    "df = df[df['time_difference'] < 180]\n",
    "df = df[df['time_difference'] > 0.5]\n",
    "df = df[df['trip_distance'] < 200]\n",
    "\n",
    "# drop outliers since their total fairs are too much compared to trip distance \n",
    "df = df.drop([5773420, 2427507])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# shuffle the data\n",
    "df1 = df.sample(frac=1)\n",
    "\n",
    "df1 = df1.reset_index(drop=True)\n",
    "\n",
    "X = df1.drop(['tpep_pickup_datetime', 'tpep_dropoff_datetime', 'fare_amount', 'tip_amount', 'total_amount'], axis = 1)\n",
    "\n",
    "le = LabelEncoder()\n",
    "le.fit(X['store_and_fwd_flag'])\n",
    "X['store_and_fwd_flag'] = le.transform(X['store_and_fwd_flag'])\n",
    "\n",
    "y = df1['total_amount']\n",
    "y2 = df1['fare_amount']\n",
    "y3 = df1['tip_amount']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
       "           max_features='auto', max_leaf_nodes=None,\n",
       "           min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "           min_samples_leaf=1, min_samples_split=2,\n",
       "           min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=None,\n",
       "           oob_score=False, random_state=None, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf = RandomForestRegressor(n_estimators = 100)\n",
    "rf.fit(X.iloc[:1000000], y.iloc[:1000000])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Importance using decision trees\n",
    "\n",
    "In decision trees, every node is a condition how to split values in a single feature, so that similar values of dependent variable end up in the same set after the split. The condition is based on impurity, which in case of classification problems is Gini impurity / information gain (entropy), while for regression trees its variance. So when training a tree we can compute how much each feature contributes to decreasing the weighted impurity.\n",
    "\n",
    "In case of Random Forest we are talking about averaging the decrease in impurity over trees."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "base_imp = imp_df(X.columns, rf.feature_importances_)\n",
    "var_imp_plot(base_imp, 'feature importance using scikit-learn')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Permutation feature importance\n",
    "\n",
    "This approach directly measures feature importance by observing how random re-shuffling (thus preserving the distribution of the variable) of each predictor influences model performance.\n",
    "\n",
    "The approach can be described in the following steps:\n",
    "\n",
    "1. Train the baseline model and record the score (for example, accuracy or R^2) by passing validation set. This can also be done on the training set, at the cost of sacrificing information about generalisation.\n",
    "\n",
    "2. Re-shuffle values from one feature in the selected dataset, pass the dataset to the model again to obtain predictions and calculate the metric for this modified dataset. The feature importance is the difference between the benchmark score and the one from the modified (permuted) dataset.\n",
    "\n",
    "3. Repeat 2. for all feature in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "perm_imp_rfpimp = permutation_importances(rf, X.iloc[2000000:2400000], y.iloc[2000000:2400000], r2)\n",
    "perm_imp_rfpimp.reset_index(drop = False, inplace = True)\n",
    "var_imp_plot(perm_imp_rfpimp, 'Permutation feature importance using rfpimp')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since the size of the data is too large (almost 10,000,000), I could not train the RF model using the whole data. Just to check which features are most important to predict taxi fares, I used a random subset with a size of 1,000,000. \n",
    "\n",
    "Both methods indicate that the VendorID, store_and_fwd_flag, and improvement_surcharge variables are not significant. Based on these results, I thought that the VendorID and store_and_fwd_flag variables are not useful for maximizing a taxi driver's income. Descriptions of the other useless variables are given in my report."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
